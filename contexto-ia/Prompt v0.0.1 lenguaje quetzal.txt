** Prompt Lenguaje Quetzal v0.0.1 **

Quiero que hagas la v0.0.1 del interprete Quetzal

<mensaje para el agente>
Siempre responde en español, no uses palabras en inglés, excepto cuando se indique lo contrario.
El código debe estar escrito en español, incluyendo funciones, variables y archivos.
El interprete debe ser capaz de interpretar el lenguaje Quetzal y ejecutar el código de manera eficiente.
El interprete debe ser capaz de manejar errores de sintaxis, errores de tipo, errores de ejecución y errores de lógica.
</mensaje para el agente>

<introducción>
Lenguaje Quetzal es un lenguaje de programación interpretado en tiempo de ejecución, programado en rust para que sea mucho más rapido,
Los archivo de Quetzal se van a caracterizar por la terminación .qz, ejemplo:

principal.qz
otro_archivo.qz

Lenguaje Quetzal posee un tipado fuerte
El interprete debe ser compatible con JSON nativamente
</introducción>

<instrucciones de programación>
El código para desarrollar el interprete de Lenguaje Quetzal principalmente debe estar escrito en español, funciones, variables, al igual que los archivos.

El archivo que es punto de entrada se llama, principal.rs

<archivos>
Todos los archivos del código deben estar en español, al igual que los directorios, ejemplos:
 - principal.rs
 - utileria.rs
 - carpeta1/modulo.rs
 - carpeeta1/modulos/modulo3.rs
 - etc
</archivos>

<codigo para construir el interprete>
Todo el código debe estar en español, adicional debe estar documentado en español, no se permiten palabras en inglés, exceptuando fn main(),
todas las funciones deben estar en minusculas y separadas con guiones bajos, ejemplos:

```rs
// Declarando funciones
fn nombre_funcion(nombre_parametro1, nombre_parametro2, nombre_parametro3){}

// Las funciones también pueden recibir parámetros por defecto, ejemplo:
fn nombre_funcion(nombre_parametro1, nombre_parametro2 = "valor por defecto", nombre_parametro3 = 0){}

// Las funciones también pueden ser asincronas, ejemplo:
asincrono fn nombre_funcion(nombre_parametro1, nombre_parametro2, nombre_parametro3){
	// Código asincrono
	retornar valor
}

// Declarando constantes
let nombre_constante = variable_algo;

```

*Importante:* Los objetos si deben declararse con camel case
</codigo para construir el interprete>
</instrucciones de programación>

<Lenguaje Quetzal>
En está sección se detalla la sintaxis y el correcto funcionamiento del interprete

<sintaxis>
** Importante: ** La palabra tipo hace referencia a los tipos de datos, por ejemplo: número, cadena, entero, etc.
El lenguaje de programación Quetzal no va a tener ; al finalizar las instrucciones


*Comentarios*
```qz
// Esto es un comentario en una sola linea

/*
 Es es un comentario multilinea
*/
```

*Tipos disponibles*
```qz
// No es nada
vacio nombre_variable

// Valor entero
entero nombre_variable = 0

// Valor númerico flotante
número nombre_variable = 0.0

// Una cadena de caracteres
cadena nombre_variable = "Esto es una cadena"

// Valor booleano
bool nombre_variable = verdadero o falso

// Listas
lista<tipo> nombre_lista = [valor1, valor2, valor3]

// También el interprete puede decidir que tipo será la lista
lista nombre_lista = [0.2, 0, 3]

// Podemos mezclar diferentes tipos también en una lista
lista nombre_lista = [3, "cadena", booleano, 30.3]

/*
Nota: Todos los tipos por defecto son constantes, para hacer que el tipo sea variable se debe usar la palabra reservada "mut", ejemplo
*/
número mut nombre_variable = 3

/*
Nota2: si se intenta sobreescribir una palabra reservada, el interprete debe arrojar un error, por ejemplo:
*/
cadena mut cadena = "Esto es una cadena"
// Esto debe arrojar un error porque "cadena" es una palabra reservada

```

*Declaración de funciones*
```qz
vacio nombre_funcion(tipo nombre_parametro, tipo mut nombre_parametro){
      // Acá el resto de código

      retornar valor
}

número nombre_funcion(tipo nombre_parametro, tipo mut nombre_parametro){
	  // Acá el resto de código

	  retornar valor
}

cadena nombre_funcion(tipo nombre_parametro, tipo mut nombre_parametro){
	  // Acá el resto de código

	  retornar valor
}

// Funciones asincronas
asincrono número nombre_funcion(tipo nombre_parametro, tipo mut nombre_parametro){
	  // Acá el resto de código asincrono

	  retornar valor
}

// Funciones que no retornan nada
vacio nombre_funcion(tipo nombre_parametro, tipo mut nombre_parametro){
	  // Acá el resto de código

	  // No se usa retornar porque no retorna nada
}
```

*Declaración de objetos*
```qz

objeto NombreObjeto {

	tipo variable_de_objeto = valor
	tipo variable_de_objeto2

	NombreObjeto(){...}

	// Constructor con parametros
	NombreObjeto(tipo parametro1, tipo parametro2){...}

	tipo nombre_funcion(tipo parametro1, tipo parametro2){...}

	// Funciones estaticas o que no requieren instanciar el objeto se usa la palabra reservada "libre"
	libre tipo nombre_funcion(tipo parametro1){...}

}

// instanciando objeto

NombreObjeto nombre_variable = nuevo NombreObjeto()

// Uso del objeto ejemplo de ejecutando una función
tipo variable_1 = nombre_variable.nombre_funcion()

/*
Nota importante: todas las funciones por defecto son publicas y se pueden usar libremente, al igual que las variables, para separar funciones privadas y publicas se debe escribir con una macro, ejemplo:
*/

objeto NombreObjeto {

// Esto es accesible desde afuera
publico:
	// Está variable es publica
	tipo variable_de_objeto
	NombreObjeto(){...}

	// Constructor con parametros
	NombreObjeto(tipo parametro1, tipo parametro2){
		ambiente.variable_de_objeto = parametro1
		ambiente.variable_de_objeto2 = parametro2
	}

// Esto unicamente se manipula adentro del objeto
privado:
	// Está variable es privada
	tipo variable_de_objeto2


	tipo nombre_funcion(tipo parametro1, tipo parametro2){...}

	// Funciones estaticas o que no requieren instanciar el objeto se usa la palabra reservada "libre"
	libre tipo nombre_funcion(tipo parametro1){...}

}

// instanciando objeto con macro privada y publica

NombreObjeto nombre_variable = nuevo NombreObjeto()

// Error de acceso a la variable porque es privada dentro del objeto
tipo variable1 = nombre_variable.variable_de_objeto2

// Correcto uso porque es publica
tipo variable1 = nombre_variable.variable_de_objeto

```

*Declaración de objeto generico para tener compatibilidad con JSON*
```qz
jsn nombre_variable = {
	valor1: "cadena",
	// numero
	valor2: 2.34453232,
	// entero
	valor3: 1,
	// lista
	valor4: [variable1, variable2, "cadena", etc....]
}

// json no constante
jsn mut nombre_json = {
	valor1: "cadena",
	// numero
	valor2: 2.34453232,
	// entero
	valor3: 1,
	// lista
	valor4: [variable1, variable2, "cadena", etc....]
}
```

*Bucles*
```qz
// Bucle for
para (variable=0; condicion; incremento) {
	// Código a ejecutar
}

// Bucle while
mientras (condición) {
	// Código a ejecutar
}

// Bucle do while
hacer {
	// Código a ejecutar
} mientras (condición)

// Bucle foreach
para (variable en lista) {
	// Código a ejecutar
}
```

*Condicionales*
```qz
si (condición) {
	// Código a ejecutar si la condición es verdadera
} sino {
	// Código a ejecutar si la condición es falsa
}

si (condición) {
	// Código a ejecutar si la condición es verdadera
} sino si (otra_condición) {
	// Código a ejecutar si la otra condición es verdadera
} sino {
	// Código a ejecutar si ninguna de las condiciones anteriores es verdadera
}
```

*Lista de palabras reservadas*
```qz
// === TIPOS DE DATOS ===
- vacio      // Tipo para variables sin valor
- entero     // Tipo para números enteros
- número     // Tipo para números decimales/flotantes
- cadena     // Tipo para cadenas de texto
- bool       // Tipo para valores booleanos
- verdadero  // Valor booleano verdadero
- falso      // Valor booleano falso
- lista      // Tipo para arreglos/listas de elementos
- jsn        // Tipo para objetos JSON

// === MODIFICADORES ===
- mut        // Hace que una variable sea mutable (no constante)
- tipo       // Palabra reservada para declaración de tipos
- publico    // Modificador de acceso público en objetos
- privado    // Modificador de acceso privado en objetos
- libre      // Funciones estáticas que no requieren instancia del objeto

// === FUNCIONES Y OBJETOS ===
- fn         // Declaración de funciones (herencia de Rust)
- retornar   // Instrucción para devolver valores de funciones
- objeto     // Declaración de clases/objetos
- nuevo      // Instanciación de objetos
- ambiente   // Referencia al objeto actual (similar a 'this')

// === PROGRAMACIÓN ASÍNCRONA ===
- asincrono  // Declaración de funciones asíncronas
- esperar    // Palabra para esperar funciones asíncronas

// === CONTROL DE FLUJO ===
- si         // Condicional if
- sino       // Condicional else
- mientras   // Bucle while
- para       // Bucles for y foreach
- hacer      // Bucle do-while
- romper     // Instrucción break para salir de bucles
- continuar  // Instrucción continue para continuar bucles

// === MANEJO DE EXCEPCIONES ===
- intentar   // Bloque try para manejo de excepciones
- atrapar    // Bloque catch para capturar excepciones
- finalmente // Bloque finally que siempre se ejecuta
- lanzar     // Lanzar una excepción
- excepción  // Declaración de excepciones personalizadas

// === MÓDULOS Y ALIAS ===
- importar   // Importar módulos o funciones de otros archivos
- exportar   // Exportar funciones o variables para uso externo
- desde      // Especifica la ruta del módulo a importar
- como       // Crear alias para variables, funciones o importaciones

// === OPERADORES LÓGICOS ===
- y          // Operador lógico AND (&&)
- o          // Operador lógico OR (||)

// === OTROS ===
- en         // Usado en bucles foreach
```

** Modulos **
El lenguaje Quetzal permite la creación de módulos para organizar el código. Los módulos se definen en archivos separados y se importan en el archivo principal o en otros módulos.
```qz
// Importando un módulo
importar {
	funciones,
	variables,
	objetos
} desde "ruta/al/modulo.qz"

// Importando un módulo con un alias
importar {
	funciones como alias_funciones,
	variables como alias_variables,
	objetos como alias_objetos
} desde "ruta/al/modulo.qz"


// Exportar funciones o variables desde un módulo
exportar {
	funciones,
	variables,
	objetos
}
```

** Importante: **
El compilador debe ser capaz de detectar errores de sintaxis, errores de tipo, errores de ejecución y errores de lógica, además de poder manejar excepciones.
El compilador debe arrojar mensajes de error claros y concisos, indicando la línea y el tipo de error.
El compilador debe ser capaz de manejar comentarios en una sola línea y en varias líneas.

<operadores>
Operadores disponibles en Quetzal:
```qz
// Aritméticos
+  // Suma
-  // Resta
*  // Multiplicación
/  // División
%  // Módulo

// Comparación
== // Igualdad
!= // Desigualdad
>  // Mayor que
<  // Menor que
>= // Mayor o igual que
<= // Menor o igual que

// Lógicos
&& // Y
y // Y
o // O
|| // O
!  // No

// Asignación
=  // Asignación
+= // Asignación con suma
-= // Asignación con resta
*= // Asignación con multiplicación
/= // Asignación con división
%= // Asignación con módulo

// Incremento y decremento
++ // Incremento
-- // Decremento

// Concatenación
+  // Concatenación de cadenas
+= // Concatenación y asignación de cadenas
c"cadena {variable}" // Concatenación de cadenas con variables

// Acceso a propiedades
.  // Acceso a propiedades de objetos
[] // Acceso a elementos de listas
// Operador ternario
condición ? valor_si_verdadero : valor_si_falso // Operador ternario
// Operador de propagación
... // Propagación de elementos en listas o objetos
// Operador de coincidencia de patrones
</operadores>

<conversión de tipos>
Conversión de tipos en Quetzal:
```qz
// Conversión de cadena a número
número nombre_variable = "1234".numero()

// Conversión de cadena a entero
entero nombre_variable = "1234".entero()

// Conversión de número a cadena
cadena nombre_variable = 1234.cadena()

// Conversión de booleano a cadena
cadena nombre_variable = verdadero.cadena()

// Conversión de cadena a booleano
bool nombre_variable = "verdadero".bool()

// Conversión de lista a cadena
cadena nombre_variable = [1, 2, 3].cadena()

// Conversión de objeto a cadena
cadena nombre_variable = {clave: "valor"}.cadena()

// Conversión de cadena a lista
lista nombre_variable = "1,2,3".lista()

// Conversión de cadena a objeto JSON
jsn nombre_variable = '{"clave": "valor"}'.jsn()

</conversión de tipos>

<excepciones>
Manejo de excepciones en Quetzal:
```qz
// Manejo de excepciones
intentar {
	// Código que puede lanzar una excepción
} atrapar (excepción) {
	// Código para manejar la excepción
	// Se puede acceder a la excepción con la variable "excepción"
}
finalmente{
	// Código que se ejecuta siempre, independientemente de si se lanzó una excepción o no
}

// Lanzar una excepción
lanzar nuevo Excepción("Mensaje de error")

// Definir una excepción personalizada
excepción MiExcepción {
	mensaje: cadena,
	código: entero
}

// Lanzar una excepción personalizada
lanzar nuevo MiExcepción("Mensaje de error", 404)

// Capturar una excepción personalizada
intentar {
	// Código que puede lanzar una excepción
} atrapar (MiExcepción ex) {
	// Código para manejar la excepción personalizada
	// Se puede acceder a los atributos de la excepción con "ex.mensaje" y "ex.código"
}
finalmente {
	// Código que se ejecuta siempre, independientemente de si se lanzó una excepción o no
}

// Capturar múltiples excepciones
intentar {
	// Código que puede lanzar una excepción
} atrapar (MiExcepción ex) {
	// Manejo de la excepción personalizada
} atrapar (Excepción ex) {
	// Manejo de cualquier otra excepción
} finalmente {
	// Código que se ejecuta siempre, independientemente de si se lanzó una excepción o no
}

// Capturar excepciones con un alias
intentar {
	// Código que puede lanzar una excepción
} atrapar (MiExcepción ex as e) {
	// Manejo de la excepción personalizada con alias "e"
} atrapar (Excepción ex as e) {
	// Manejo de cualquier otra excepción con alias "e"
} finalmente {
	// Código que se ejecuta siempre, independientemente de si se lanzó una excepción o no
}

```
</excepciones>

<consola>
Acá se puede ejecutar código en la consola de Quetzal, por ejemplo:
```qz
// Imprimir en la consola
imprimir("Hola, mundo desde lenguaje Quetzal!")
// Imprimir una variable
número variable = 42
imprimir("El valor de la variable es: " + variable.cadena())
// Imprimir un objeto JSON
jsn objeto = {clave: "valor", numero: 123}
imprimir("El objeto es: " + objeto.cadena())
// Imprimir una lista
lista lista = [1, 2, 3, 4, 5]
imprimir("La lista es: " + lista.cadena())
// Imprimir un mensaje de error
imprimir_error("Esto es un mensaje de error")
// Imprimir un mensaje de advertencia
imprimir_advertencia("Esto es un mensaje de advertencia")
// Imprimir un mensaje de información
imprimir_informacion("Esto es un mensaje de información")
// Imprimir un mensaje de depuración
imprimir_depurar("Esto es un mensaje de depuración")
// Imprimir un mensaje de éxito
imprimir_exito("Esto es un mensaje de éxito")
// Imprimir un mensaje de alerta
imprimir_alerta("Esto es un mensaje de alerta")
// Imprimir un mensaje de confirmación
imprimir_confirmacion("Esto es un mensaje de confirmación")

```

*Importante:*
El interprete debe ser capaz de ejecutar código en la consola de Quetzal, permitiendo al usuario interactuar con el lenguaje de manera dinámica.
El interprete debe permitir mostrar diferentes colores en la consola para cada tipo de mensaje, por ejemplo:
```qz
// Imprimir un mensaje de error en rojo
imprimir_error("Esto es un mensaje de error")
// Imprimir un mensaje de advertencia en amarillo
imprimir_advertencia("Esto es un mensaje de advertencia")
// Imprimir un mensaje de información en azul
imprimir_informacion("Esto es un mensaje de información")
// Imprimir un mensaje de exito en verde
imprimir_exito("Esto es un mensaje de éxito")

```



</consola>

</sintaxis>

</Lenguaje Quetzal>